@using HungerGamesSimulator.Data.Metadata

<h2>Tributes</h2>

<p> Add your Tributes names in the form below.</p>
<form>
  <label for="tribute-name"> Name: </label>
  <input type="text" id="tribute-name" @bind="_name" placeholder="Tributes Name" @onkeyup="@(async args => { if (args.Code == EnterCode) { await CreateTribute(); } })">

  <label for="tribute-attribute"> Attribute: </label>
  <input type="text" id="tribute-attribute" placeholder="Tributes Attribute">

  <div class="button-container">
    <button type="button" @onclick="@CreateTribute">Add Tribute</button>
    <button type="button" id="tribute-clear" @onclick="@ClearTributes">Clear Tributes</button>
  </div> <!-- end button-container-->
</form>

<p> Here is the current list of Tributes:</p>
<div class="tributes-table">
  <table id="tributes">
    <tr class="header">
      <th class="header">Names</th>
      <th class="header">Delete</th>
    </tr>
    @foreach ( var tribute in Tributes )
    {
      <tr class="info">
        <td class="info">@tribute.Name</td>
        <td class="info">
          <button @onclick="@( async () => await RemoveTribute(tribute))">Remove Tribute</button>
        </td>
      </tr>
    }
  </table>
</div> <!-- end tributes table-->
<br>

@code
{
  [Parameter]
  public List<IMetaData> Tributes { get; set; }

  [Parameter]
  public EventCallback<List<IMetaData>> TributesChanged { get; set; }

  private string? _name;

  private const string EnterCode = "Enter";

  private async Task CreateTribute()
  {
    if ( string.IsNullOrWhiteSpace( _name ) )
    {
      return;
    }

    Tributes.Add( new TributeMetaData( _name ) );
    await TributesChanged.InvokeAsync( Tributes );
  }

  private async Task RemoveTribute( IMetaData tribute )
  {
    Tributes.Remove(tribute);
    await TributesChanged.InvokeAsync( Tributes );
  }

  private async Task ClearTributes()
  {
    Tributes.Clear();
    await TributesChanged.InvokeAsync( Tributes );
  }
}
